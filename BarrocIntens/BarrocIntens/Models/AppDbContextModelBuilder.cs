// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BarrocIntens.Models
{
    public partial class AppDbContextModel
    {
        partial void Initialize()
        {
            var company = CompanyEntityType.Create(this);
            var contract = ContractEntityType.Create(this);
            var customInvoice = CustomInvoiceEntityType.Create(this);
            var customInvoiceProduct = CustomInvoiceProductEntityType.Create(this);
            var expense = ExpenseEntityType.Create(this);
            var expenseProduct = ExpenseProductEntityType.Create(this);
            var maintenaceAppointment = MaintenaceAppointmentEntityType.Create(this);
            var note = NoteEntityType.Create(this);
            var product = ProductEntityType.Create(this);
            var productCategory = ProductCategoryEntityType.Create(this);
            var quote = QuoteEntityType.Create(this);
            var quoteProduct = QuoteProductEntityType.Create(this);
            var role = RoleEntityType.Create(this);
            var user = UserEntityType.Create(this);

            CompanyEntityType.CreateForeignKey1(company, user);
            ContractEntityType.CreateForeignKey1(contract, company);
            CustomInvoiceEntityType.CreateForeignKey1(customInvoice, company);
            CustomInvoiceProductEntityType.CreateForeignKey1(customInvoiceProduct, customInvoice);
            CustomInvoiceProductEntityType.CreateForeignKey2(customInvoiceProduct, product);
            ExpenseEntityType.CreateForeignKey1(expense, user);
            ExpenseProductEntityType.CreateForeignKey1(expenseProduct, expense);
            ExpenseProductEntityType.CreateForeignKey2(expenseProduct, product);
            MaintenaceAppointmentEntityType.CreateForeignKey1(maintenaceAppointment, company);
            NoteEntityType.CreateForeignKey1(note, company);
            NoteEntityType.CreateForeignKey2(note, user);
            ProductEntityType.CreateForeignKey1(product, expense);
            ProductEntityType.CreateForeignKey2(product, productCategory);
            ProductEntityType.CreateForeignKey3(product, quote);
            QuoteEntityType.CreateForeignKey1(quote, user);
            QuoteProductEntityType.CreateForeignKey1(quoteProduct, product);
            QuoteProductEntityType.CreateForeignKey2(quoteProduct, quote);
            UserEntityType.CreateForeignKey1(user, role);

            CompanyEntityType.CreateAnnotations(company);
            ContractEntityType.CreateAnnotations(contract);
            CustomInvoiceEntityType.CreateAnnotations(customInvoice);
            CustomInvoiceProductEntityType.CreateAnnotations(customInvoiceProduct);
            ExpenseEntityType.CreateAnnotations(expense);
            ExpenseProductEntityType.CreateAnnotations(expenseProduct);
            MaintenaceAppointmentEntityType.CreateAnnotations(maintenaceAppointment);
            NoteEntityType.CreateAnnotations(note);
            ProductEntityType.CreateAnnotations(product);
            ProductCategoryEntityType.CreateAnnotations(productCategory);
            QuoteEntityType.CreateAnnotations(quote);
            QuoteProductEntityType.CreateAnnotations(quoteProduct);
            RoleEntityType.CreateAnnotations(role);
            UserEntityType.CreateAnnotations(user);

            AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);
            AddAnnotation("ProductVersion", "8.0.10");
            AddAnnotation("Relational:MaxIdentifierLength", 64);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var company = FindEntityType("BarrocIntens.Models.Company")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            company.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var barrocIntensModelsCompanyTableBase = new TableBase("BarrocIntens.Models.Company", null, relationalModel);
            var bkrCheckedAtColumnBase = new ColumnBase<ColumnMappingBase>("BkrCheckedAt", "datetime(6)", barrocIntensModelsCompanyTableBase)
            {
                IsNullable = true
            };
            barrocIntensModelsCompanyTableBase.Columns.Add("BkrCheckedAt", bkrCheckedAtColumnBase);
            var cityColumnBase = new ColumnBase<ColumnMappingBase>("City", "varchar(255)", barrocIntensModelsCompanyTableBase);
            barrocIntensModelsCompanyTableBase.Columns.Add("City", cityColumnBase);
            var countryCodeColumnBase = new ColumnBase<ColumnMappingBase>("CountryCode", "varchar(3)", barrocIntensModelsCompanyTableBase);
            barrocIntensModelsCompanyTableBase.Columns.Add("CountryCode", countryCodeColumnBase);
            var houseNumberColumnBase = new ColumnBase<ColumnMappingBase>("HouseNumber", "varchar(45)", barrocIntensModelsCompanyTableBase);
            barrocIntensModelsCompanyTableBase.Columns.Add("HouseNumber", houseNumberColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "int", barrocIntensModelsCompanyTableBase);
            barrocIntensModelsCompanyTableBase.Columns.Add("Id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "varchar(255)", barrocIntensModelsCompanyTableBase);
            barrocIntensModelsCompanyTableBase.Columns.Add("Name", nameColumnBase);
            var phoneColumnBase = new ColumnBase<ColumnMappingBase>("Phone", "varchar(255)", barrocIntensModelsCompanyTableBase);
            barrocIntensModelsCompanyTableBase.Columns.Add("Phone", phoneColumnBase);
            var streetColumnBase = new ColumnBase<ColumnMappingBase>("Street", "varchar(255)", barrocIntensModelsCompanyTableBase);
            barrocIntensModelsCompanyTableBase.Columns.Add("Street", streetColumnBase);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "int", barrocIntensModelsCompanyTableBase);
            barrocIntensModelsCompanyTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("BarrocIntens.Models.Company", barrocIntensModelsCompanyTableBase);
            var barrocIntensModelsCompanyMappingBase = new TableMappingBase<ColumnMappingBase>(company, barrocIntensModelsCompanyTableBase, true);
            barrocIntensModelsCompanyTableBase.AddTypeMapping(barrocIntensModelsCompanyMappingBase, false);
            defaultTableMappings.Add(barrocIntensModelsCompanyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, company.FindProperty("Id")!, barrocIntensModelsCompanyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bkrCheckedAtColumnBase, company.FindProperty("BkrCheckedAt")!, barrocIntensModelsCompanyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cityColumnBase, company.FindProperty("City")!, barrocIntensModelsCompanyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)countryCodeColumnBase, company.FindProperty("CountryCode")!, barrocIntensModelsCompanyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)houseNumberColumnBase, company.FindProperty("HouseNumber")!, barrocIntensModelsCompanyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, company.FindProperty("Name")!, barrocIntensModelsCompanyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneColumnBase, company.FindProperty("Phone")!, barrocIntensModelsCompanyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)streetColumnBase, company.FindProperty("Street")!, barrocIntensModelsCompanyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, company.FindProperty("UserId")!, barrocIntensModelsCompanyMappingBase);

            var tableMappings = new List<TableMapping>();
            company.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var companiesTable = new Table("Companies", null, relationalModel);
            var idColumn = new Column("Id", "int", companiesTable);
            companiesTable.Columns.Add("Id", idColumn);
            var bkrCheckedAtColumn = new Column("BkrCheckedAt", "datetime(6)", companiesTable)
            {
                IsNullable = true
            };
            companiesTable.Columns.Add("BkrCheckedAt", bkrCheckedAtColumn);
            var cityColumn = new Column("City", "varchar(255)", companiesTable);
            companiesTable.Columns.Add("City", cityColumn);
            var countryCodeColumn = new Column("CountryCode", "varchar(3)", companiesTable);
            companiesTable.Columns.Add("CountryCode", countryCodeColumn);
            var houseNumberColumn = new Column("HouseNumber", "varchar(45)", companiesTable);
            companiesTable.Columns.Add("HouseNumber", houseNumberColumn);
            var nameColumn = new Column("Name", "varchar(255)", companiesTable);
            companiesTable.Columns.Add("Name", nameColumn);
            var phoneColumn = new Column("Phone", "varchar(255)", companiesTable);
            companiesTable.Columns.Add("Phone", phoneColumn);
            var streetColumn = new Column("Street", "varchar(255)", companiesTable);
            companiesTable.Columns.Add("Street", streetColumn);
            var userIdColumn = new Column("UserId", "int", companiesTable);
            companiesTable.Columns.Add("UserId", userIdColumn);
            var pK_Companies = new UniqueConstraint("PK_Companies", companiesTable, new[] { idColumn });
            companiesTable.PrimaryKey = pK_Companies;
            var pK_CompaniesUc = RelationalModel.GetKey(this,
                "BarrocIntens.Models.Company",
                new[] { "Id" });
            pK_Companies.MappedKeys.Add(pK_CompaniesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CompaniesUc).Add(pK_Companies);
            companiesTable.UniqueConstraints.Add("PK_Companies", pK_Companies);
            var iX_Companies_UserId = new TableIndex(
            "IX_Companies_UserId", companiesTable, new[] { userIdColumn }, false);
            var iX_Companies_UserIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.Company",
                new[] { "UserId" });
            iX_Companies_UserId.MappedIndexes.Add(iX_Companies_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Companies_UserIdIx).Add(iX_Companies_UserId);
            companiesTable.Indexes.Add("IX_Companies_UserId", iX_Companies_UserId);
            relationalModel.Tables.Add(("Companies", null), companiesTable);
            var companiesTableMapping = new TableMapping(company, companiesTable, true);
            companiesTable.AddTypeMapping(companiesTableMapping, false);
            tableMappings.Add(companiesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, company.FindProperty("Id")!, companiesTableMapping);
            RelationalModel.CreateColumnMapping(bkrCheckedAtColumn, company.FindProperty("BkrCheckedAt")!, companiesTableMapping);
            RelationalModel.CreateColumnMapping(cityColumn, company.FindProperty("City")!, companiesTableMapping);
            RelationalModel.CreateColumnMapping(countryCodeColumn, company.FindProperty("CountryCode")!, companiesTableMapping);
            RelationalModel.CreateColumnMapping(houseNumberColumn, company.FindProperty("HouseNumber")!, companiesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, company.FindProperty("Name")!, companiesTableMapping);
            RelationalModel.CreateColumnMapping(phoneColumn, company.FindProperty("Phone")!, companiesTableMapping);
            RelationalModel.CreateColumnMapping(streetColumn, company.FindProperty("Street")!, companiesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, company.FindProperty("UserId")!, companiesTableMapping);

            var contract = FindEntityType("BarrocIntens.Models.Contract")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            contract.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var barrocIntensModelsContractTableBase = new TableBase("BarrocIntens.Models.Contract", null, relationalModel);
            var companyIdColumnBase = new ColumnBase<ColumnMappingBase>("CompanyId", "int", barrocIntensModelsContractTableBase);
            barrocIntensModelsContractTableBase.Columns.Add("CompanyId", companyIdColumnBase);
            var endDateColumnBase = new ColumnBase<ColumnMappingBase>("EndDate", "datetime(6)", barrocIntensModelsContractTableBase);
            barrocIntensModelsContractTableBase.Columns.Add("EndDate", endDateColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "int", barrocIntensModelsContractTableBase);
            barrocIntensModelsContractTableBase.Columns.Add("Id", idColumnBase0);
            var startDateColumnBase = new ColumnBase<ColumnMappingBase>("StartDate", "datetime(6)", barrocIntensModelsContractTableBase);
            barrocIntensModelsContractTableBase.Columns.Add("StartDate", startDateColumnBase);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("Type", "enum('Monthly','Perodic')", barrocIntensModelsContractTableBase);
            barrocIntensModelsContractTableBase.Columns.Add("Type", typeColumnBase);
            relationalModel.DefaultTables.Add("BarrocIntens.Models.Contract", barrocIntensModelsContractTableBase);
            var barrocIntensModelsContractMappingBase = new TableMappingBase<ColumnMappingBase>(contract, barrocIntensModelsContractTableBase, true);
            barrocIntensModelsContractTableBase.AddTypeMapping(barrocIntensModelsContractMappingBase, false);
            defaultTableMappings0.Add(barrocIntensModelsContractMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, contract.FindProperty("Id")!, barrocIntensModelsContractMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)companyIdColumnBase, contract.FindProperty("CompanyId")!, barrocIntensModelsContractMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)endDateColumnBase, contract.FindProperty("EndDate")!, barrocIntensModelsContractMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startDateColumnBase, contract.FindProperty("StartDate")!, barrocIntensModelsContractMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, contract.FindProperty("Type")!, barrocIntensModelsContractMappingBase);

            var tableMappings0 = new List<TableMapping>();
            contract.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var contractsTable = new Table("Contracts", null, relationalModel);
            var idColumn0 = new Column("Id", "int", contractsTable);
            contractsTable.Columns.Add("Id", idColumn0);
            var companyIdColumn = new Column("CompanyId", "int", contractsTable);
            contractsTable.Columns.Add("CompanyId", companyIdColumn);
            var endDateColumn = new Column("EndDate", "datetime(6)", contractsTable);
            contractsTable.Columns.Add("EndDate", endDateColumn);
            var startDateColumn = new Column("StartDate", "datetime(6)", contractsTable);
            contractsTable.Columns.Add("StartDate", startDateColumn);
            var typeColumn = new Column("Type", "enum('Monthly','Perodic')", contractsTable);
            contractsTable.Columns.Add("Type", typeColumn);
            var pK_Contracts = new UniqueConstraint("PK_Contracts", contractsTable, new[] { idColumn0 });
            contractsTable.PrimaryKey = pK_Contracts;
            var pK_ContractsUc = RelationalModel.GetKey(this,
                "BarrocIntens.Models.Contract",
                new[] { "Id" });
            pK_Contracts.MappedKeys.Add(pK_ContractsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ContractsUc).Add(pK_Contracts);
            contractsTable.UniqueConstraints.Add("PK_Contracts", pK_Contracts);
            var iX_Contracts_CompanyId = new TableIndex(
            "IX_Contracts_CompanyId", contractsTable, new[] { companyIdColumn }, false);
            var iX_Contracts_CompanyIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.Contract",
                new[] { "CompanyId" });
            iX_Contracts_CompanyId.MappedIndexes.Add(iX_Contracts_CompanyIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Contracts_CompanyIdIx).Add(iX_Contracts_CompanyId);
            contractsTable.Indexes.Add("IX_Contracts_CompanyId", iX_Contracts_CompanyId);
            relationalModel.Tables.Add(("Contracts", null), contractsTable);
            var contractsTableMapping = new TableMapping(contract, contractsTable, true);
            contractsTable.AddTypeMapping(contractsTableMapping, false);
            tableMappings0.Add(contractsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, contract.FindProperty("Id")!, contractsTableMapping);
            RelationalModel.CreateColumnMapping(companyIdColumn, contract.FindProperty("CompanyId")!, contractsTableMapping);
            RelationalModel.CreateColumnMapping(endDateColumn, contract.FindProperty("EndDate")!, contractsTableMapping);
            RelationalModel.CreateColumnMapping(startDateColumn, contract.FindProperty("StartDate")!, contractsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, contract.FindProperty("Type")!, contractsTableMapping);

            var customInvoice = FindEntityType("BarrocIntens.Models.CustomInvoice")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            customInvoice.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var barrocIntensModelsCustomInvoiceTableBase = new TableBase("BarrocIntens.Models.CustomInvoice", null, relationalModel);
            var companyIdColumnBase0 = new ColumnBase<ColumnMappingBase>("CompanyId", "int", barrocIntensModelsCustomInvoiceTableBase);
            barrocIntensModelsCustomInvoiceTableBase.Columns.Add("CompanyId", companyIdColumnBase0);
            var dateColumnBase = new ColumnBase<ColumnMappingBase>("Date", "datetime(6)", barrocIntensModelsCustomInvoiceTableBase);
            barrocIntensModelsCustomInvoiceTableBase.Columns.Add("Date", dateColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "int", barrocIntensModelsCustomInvoiceTableBase);
            barrocIntensModelsCustomInvoiceTableBase.Columns.Add("Id", idColumnBase1);
            var paidAtColumnBase = new ColumnBase<ColumnMappingBase>("PaidAt", "datetime(6)", barrocIntensModelsCustomInvoiceTableBase)
            {
                IsNullable = true
            };
            barrocIntensModelsCustomInvoiceTableBase.Columns.Add("PaidAt", paidAtColumnBase);
            relationalModel.DefaultTables.Add("BarrocIntens.Models.CustomInvoice", barrocIntensModelsCustomInvoiceTableBase);
            var barrocIntensModelsCustomInvoiceMappingBase = new TableMappingBase<ColumnMappingBase>(customInvoice, barrocIntensModelsCustomInvoiceTableBase, true);
            barrocIntensModelsCustomInvoiceTableBase.AddTypeMapping(barrocIntensModelsCustomInvoiceMappingBase, false);
            defaultTableMappings1.Add(barrocIntensModelsCustomInvoiceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, customInvoice.FindProperty("Id")!, barrocIntensModelsCustomInvoiceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)companyIdColumnBase0, customInvoice.FindProperty("CompanyId")!, barrocIntensModelsCustomInvoiceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateColumnBase, customInvoice.FindProperty("Date")!, barrocIntensModelsCustomInvoiceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)paidAtColumnBase, customInvoice.FindProperty("PaidAt")!, barrocIntensModelsCustomInvoiceMappingBase);

            var tableMappings1 = new List<TableMapping>();
            customInvoice.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var customInvoicesTable = new Table("CustomInvoices", null, relationalModel);
            var idColumn1 = new Column("Id", "int", customInvoicesTable);
            customInvoicesTable.Columns.Add("Id", idColumn1);
            var companyIdColumn0 = new Column("CompanyId", "int", customInvoicesTable);
            customInvoicesTable.Columns.Add("CompanyId", companyIdColumn0);
            var dateColumn = new Column("Date", "datetime(6)", customInvoicesTable);
            customInvoicesTable.Columns.Add("Date", dateColumn);
            var paidAtColumn = new Column("PaidAt", "datetime(6)", customInvoicesTable)
            {
                IsNullable = true
            };
            customInvoicesTable.Columns.Add("PaidAt", paidAtColumn);
            var pK_CustomInvoices = new UniqueConstraint("PK_CustomInvoices", customInvoicesTable, new[] { idColumn1 });
            customInvoicesTable.PrimaryKey = pK_CustomInvoices;
            var pK_CustomInvoicesUc = RelationalModel.GetKey(this,
                "BarrocIntens.Models.CustomInvoice",
                new[] { "Id" });
            pK_CustomInvoices.MappedKeys.Add(pK_CustomInvoicesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CustomInvoicesUc).Add(pK_CustomInvoices);
            customInvoicesTable.UniqueConstraints.Add("PK_CustomInvoices", pK_CustomInvoices);
            var iX_CustomInvoices_CompanyId = new TableIndex(
            "IX_CustomInvoices_CompanyId", customInvoicesTable, new[] { companyIdColumn0 }, false);
            var iX_CustomInvoices_CompanyIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.CustomInvoice",
                new[] { "CompanyId" });
            iX_CustomInvoices_CompanyId.MappedIndexes.Add(iX_CustomInvoices_CompanyIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_CustomInvoices_CompanyIdIx).Add(iX_CustomInvoices_CompanyId);
            customInvoicesTable.Indexes.Add("IX_CustomInvoices_CompanyId", iX_CustomInvoices_CompanyId);
            relationalModel.Tables.Add(("CustomInvoices", null), customInvoicesTable);
            var customInvoicesTableMapping = new TableMapping(customInvoice, customInvoicesTable, true);
            customInvoicesTable.AddTypeMapping(customInvoicesTableMapping, false);
            tableMappings1.Add(customInvoicesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, customInvoice.FindProperty("Id")!, customInvoicesTableMapping);
            RelationalModel.CreateColumnMapping(companyIdColumn0, customInvoice.FindProperty("CompanyId")!, customInvoicesTableMapping);
            RelationalModel.CreateColumnMapping(dateColumn, customInvoice.FindProperty("Date")!, customInvoicesTableMapping);
            RelationalModel.CreateColumnMapping(paidAtColumn, customInvoice.FindProperty("PaidAt")!, customInvoicesTableMapping);

            var customInvoiceProduct = FindEntityType("BarrocIntens.Models.CustomInvoiceProduct")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            customInvoiceProduct.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var barrocIntensModelsCustomInvoiceProductTableBase = new TableBase("BarrocIntens.Models.CustomInvoiceProduct", null, relationalModel);
            var amountColumnBase = new ColumnBase<ColumnMappingBase>("Amount", "int", barrocIntensModelsCustomInvoiceProductTableBase);
            barrocIntensModelsCustomInvoiceProductTableBase.Columns.Add("Amount", amountColumnBase);
            var customInvoiceIdColumnBase = new ColumnBase<ColumnMappingBase>("CustomInvoiceId", "int", barrocIntensModelsCustomInvoiceProductTableBase);
            barrocIntensModelsCustomInvoiceProductTableBase.Columns.Add("CustomInvoiceId", customInvoiceIdColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "int", barrocIntensModelsCustomInvoiceProductTableBase);
            barrocIntensModelsCustomInvoiceProductTableBase.Columns.Add("Id", idColumnBase2);
            var pricePerProductColumnBase = new ColumnBase<ColumnMappingBase>("PricePerProduct", "decimal(8,2)", barrocIntensModelsCustomInvoiceProductTableBase);
            barrocIntensModelsCustomInvoiceProductTableBase.Columns.Add("PricePerProduct", pricePerProductColumnBase);
            var productIdColumnBase = new ColumnBase<ColumnMappingBase>("ProductId", "int", barrocIntensModelsCustomInvoiceProductTableBase);
            barrocIntensModelsCustomInvoiceProductTableBase.Columns.Add("ProductId", productIdColumnBase);
            relationalModel.DefaultTables.Add("BarrocIntens.Models.CustomInvoiceProduct", barrocIntensModelsCustomInvoiceProductTableBase);
            var barrocIntensModelsCustomInvoiceProductMappingBase = new TableMappingBase<ColumnMappingBase>(customInvoiceProduct, barrocIntensModelsCustomInvoiceProductTableBase, true);
            barrocIntensModelsCustomInvoiceProductTableBase.AddTypeMapping(barrocIntensModelsCustomInvoiceProductMappingBase, false);
            defaultTableMappings2.Add(barrocIntensModelsCustomInvoiceProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, customInvoiceProduct.FindProperty("Id")!, barrocIntensModelsCustomInvoiceProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)amountColumnBase, customInvoiceProduct.FindProperty("Amount")!, barrocIntensModelsCustomInvoiceProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)customInvoiceIdColumnBase, customInvoiceProduct.FindProperty("CustomInvoiceId")!, barrocIntensModelsCustomInvoiceProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)pricePerProductColumnBase, customInvoiceProduct.FindProperty("PricePerProduct")!, barrocIntensModelsCustomInvoiceProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productIdColumnBase, customInvoiceProduct.FindProperty("ProductId")!, barrocIntensModelsCustomInvoiceProductMappingBase);

            var tableMappings2 = new List<TableMapping>();
            customInvoiceProduct.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var customInvoiceProductsTable = new Table("CustomInvoiceProducts", null, relationalModel);
            var idColumn2 = new Column("Id", "int", customInvoiceProductsTable);
            customInvoiceProductsTable.Columns.Add("Id", idColumn2);
            var amountColumn = new Column("Amount", "int", customInvoiceProductsTable);
            customInvoiceProductsTable.Columns.Add("Amount", amountColumn);
            var customInvoiceIdColumn = new Column("CustomInvoiceId", "int", customInvoiceProductsTable);
            customInvoiceProductsTable.Columns.Add("CustomInvoiceId", customInvoiceIdColumn);
            var pricePerProductColumn = new Column("PricePerProduct", "decimal(8,2)", customInvoiceProductsTable);
            customInvoiceProductsTable.Columns.Add("PricePerProduct", pricePerProductColumn);
            var productIdColumn = new Column("ProductId", "int", customInvoiceProductsTable);
            customInvoiceProductsTable.Columns.Add("ProductId", productIdColumn);
            var pK_CustomInvoiceProducts = new UniqueConstraint("PK_CustomInvoiceProducts", customInvoiceProductsTable, new[] { idColumn2 });
            customInvoiceProductsTable.PrimaryKey = pK_CustomInvoiceProducts;
            var pK_CustomInvoiceProductsUc = RelationalModel.GetKey(this,
                "BarrocIntens.Models.CustomInvoiceProduct",
                new[] { "Id" });
            pK_CustomInvoiceProducts.MappedKeys.Add(pK_CustomInvoiceProductsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CustomInvoiceProductsUc).Add(pK_CustomInvoiceProducts);
            customInvoiceProductsTable.UniqueConstraints.Add("PK_CustomInvoiceProducts", pK_CustomInvoiceProducts);
            var iX_CustomInvoiceProducts_CustomInvoiceId = new TableIndex(
            "IX_CustomInvoiceProducts_CustomInvoiceId", customInvoiceProductsTable, new[] { customInvoiceIdColumn }, false);
            var iX_CustomInvoiceProducts_CustomInvoiceIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.CustomInvoiceProduct",
                new[] { "CustomInvoiceId" });
            iX_CustomInvoiceProducts_CustomInvoiceId.MappedIndexes.Add(iX_CustomInvoiceProducts_CustomInvoiceIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_CustomInvoiceProducts_CustomInvoiceIdIx).Add(iX_CustomInvoiceProducts_CustomInvoiceId);
            customInvoiceProductsTable.Indexes.Add("IX_CustomInvoiceProducts_CustomInvoiceId", iX_CustomInvoiceProducts_CustomInvoiceId);
            var iX_CustomInvoiceProducts_ProductId = new TableIndex(
            "IX_CustomInvoiceProducts_ProductId", customInvoiceProductsTable, new[] { productIdColumn }, false);
            var iX_CustomInvoiceProducts_ProductIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.CustomInvoiceProduct",
                new[] { "ProductId" });
            iX_CustomInvoiceProducts_ProductId.MappedIndexes.Add(iX_CustomInvoiceProducts_ProductIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_CustomInvoiceProducts_ProductIdIx).Add(iX_CustomInvoiceProducts_ProductId);
            customInvoiceProductsTable.Indexes.Add("IX_CustomInvoiceProducts_ProductId", iX_CustomInvoiceProducts_ProductId);
            relationalModel.Tables.Add(("CustomInvoiceProducts", null), customInvoiceProductsTable);
            var customInvoiceProductsTableMapping = new TableMapping(customInvoiceProduct, customInvoiceProductsTable, true);
            customInvoiceProductsTable.AddTypeMapping(customInvoiceProductsTableMapping, false);
            tableMappings2.Add(customInvoiceProductsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, customInvoiceProduct.FindProperty("Id")!, customInvoiceProductsTableMapping);
            RelationalModel.CreateColumnMapping(amountColumn, customInvoiceProduct.FindProperty("Amount")!, customInvoiceProductsTableMapping);
            RelationalModel.CreateColumnMapping(customInvoiceIdColumn, customInvoiceProduct.FindProperty("CustomInvoiceId")!, customInvoiceProductsTableMapping);
            RelationalModel.CreateColumnMapping(pricePerProductColumn, customInvoiceProduct.FindProperty("PricePerProduct")!, customInvoiceProductsTableMapping);
            RelationalModel.CreateColumnMapping(productIdColumn, customInvoiceProduct.FindProperty("ProductId")!, customInvoiceProductsTableMapping);

            var expense = FindEntityType("BarrocIntens.Models.Expense")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            expense.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var barrocIntensModelsExpenseTableBase = new TableBase("BarrocIntens.Models.Expense", null, relationalModel);
            var dateColumnBase0 = new ColumnBase<ColumnMappingBase>("Date", "datetime(6)", barrocIntensModelsExpenseTableBase);
            barrocIntensModelsExpenseTableBase.Columns.Add("Date", dateColumnBase0);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "int", barrocIntensModelsExpenseTableBase);
            barrocIntensModelsExpenseTableBase.Columns.Add("Id", idColumnBase3);
            var isApprovedColumnBase = new ColumnBase<ColumnMappingBase>("IsApproved", "tinyint", barrocIntensModelsExpenseTableBase);
            barrocIntensModelsExpenseTableBase.Columns.Add("IsApproved", isApprovedColumnBase);
            var userIdColumnBase0 = new ColumnBase<ColumnMappingBase>("UserId", "int", barrocIntensModelsExpenseTableBase);
            barrocIntensModelsExpenseTableBase.Columns.Add("UserId", userIdColumnBase0);
            relationalModel.DefaultTables.Add("BarrocIntens.Models.Expense", barrocIntensModelsExpenseTableBase);
            var barrocIntensModelsExpenseMappingBase = new TableMappingBase<ColumnMappingBase>(expense, barrocIntensModelsExpenseTableBase, true);
            barrocIntensModelsExpenseTableBase.AddTypeMapping(barrocIntensModelsExpenseMappingBase, false);
            defaultTableMappings3.Add(barrocIntensModelsExpenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, expense.FindProperty("Id")!, barrocIntensModelsExpenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateColumnBase0, expense.FindProperty("Date")!, barrocIntensModelsExpenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isApprovedColumnBase, expense.FindProperty("IsApproved")!, barrocIntensModelsExpenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase0, expense.FindProperty("UserId")!, barrocIntensModelsExpenseMappingBase);

            var tableMappings3 = new List<TableMapping>();
            expense.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var expensesTable = new Table("Expenses", null, relationalModel);
            var idColumn3 = new Column("Id", "int", expensesTable);
            expensesTable.Columns.Add("Id", idColumn3);
            var dateColumn0 = new Column("Date", "datetime(6)", expensesTable);
            expensesTable.Columns.Add("Date", dateColumn0);
            var isApprovedColumn = new Column("IsApproved", "tinyint", expensesTable);
            expensesTable.Columns.Add("IsApproved", isApprovedColumn);
            var userIdColumn0 = new Column("UserId", "int", expensesTable);
            expensesTable.Columns.Add("UserId", userIdColumn0);
            var pK_Expenses = new UniqueConstraint("PK_Expenses", expensesTable, new[] { idColumn3 });
            expensesTable.PrimaryKey = pK_Expenses;
            var pK_ExpensesUc = RelationalModel.GetKey(this,
                "BarrocIntens.Models.Expense",
                new[] { "Id" });
            pK_Expenses.MappedKeys.Add(pK_ExpensesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ExpensesUc).Add(pK_Expenses);
            expensesTable.UniqueConstraints.Add("PK_Expenses", pK_Expenses);
            var iX_Expenses_UserId = new TableIndex(
            "IX_Expenses_UserId", expensesTable, new[] { userIdColumn0 }, false);
            var iX_Expenses_UserIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.Expense",
                new[] { "UserId" });
            iX_Expenses_UserId.MappedIndexes.Add(iX_Expenses_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Expenses_UserIdIx).Add(iX_Expenses_UserId);
            expensesTable.Indexes.Add("IX_Expenses_UserId", iX_Expenses_UserId);
            relationalModel.Tables.Add(("Expenses", null), expensesTable);
            var expensesTableMapping = new TableMapping(expense, expensesTable, true);
            expensesTable.AddTypeMapping(expensesTableMapping, false);
            tableMappings3.Add(expensesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, expense.FindProperty("Id")!, expensesTableMapping);
            RelationalModel.CreateColumnMapping(dateColumn0, expense.FindProperty("Date")!, expensesTableMapping);
            RelationalModel.CreateColumnMapping(isApprovedColumn, expense.FindProperty("IsApproved")!, expensesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn0, expense.FindProperty("UserId")!, expensesTableMapping);

            var expenseProduct = FindEntityType("BarrocIntens.Models.ExpenseProduct")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            expenseProduct.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var barrocIntensModelsExpenseProductTableBase = new TableBase("BarrocIntens.Models.ExpenseProduct", null, relationalModel);
            var expenseIdColumnBase = new ColumnBase<ColumnMappingBase>("ExpenseId", "int", barrocIntensModelsExpenseProductTableBase);
            barrocIntensModelsExpenseProductTableBase.Columns.Add("ExpenseId", expenseIdColumnBase);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("Id", "int", barrocIntensModelsExpenseProductTableBase);
            barrocIntensModelsExpenseProductTableBase.Columns.Add("Id", idColumnBase4);
            var productIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ProductId", "int", barrocIntensModelsExpenseProductTableBase);
            barrocIntensModelsExpenseProductTableBase.Columns.Add("ProductId", productIdColumnBase0);
            var quantityColumnBase = new ColumnBase<ColumnMappingBase>("Quantity", "int", barrocIntensModelsExpenseProductTableBase);
            barrocIntensModelsExpenseProductTableBase.Columns.Add("Quantity", quantityColumnBase);
            relationalModel.DefaultTables.Add("BarrocIntens.Models.ExpenseProduct", barrocIntensModelsExpenseProductTableBase);
            var barrocIntensModelsExpenseProductMappingBase = new TableMappingBase<ColumnMappingBase>(expenseProduct, barrocIntensModelsExpenseProductTableBase, true);
            barrocIntensModelsExpenseProductTableBase.AddTypeMapping(barrocIntensModelsExpenseProductMappingBase, false);
            defaultTableMappings4.Add(barrocIntensModelsExpenseProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, expenseProduct.FindProperty("Id")!, barrocIntensModelsExpenseProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expenseIdColumnBase, expenseProduct.FindProperty("ExpenseId")!, barrocIntensModelsExpenseProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productIdColumnBase0, expenseProduct.FindProperty("ProductId")!, barrocIntensModelsExpenseProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)quantityColumnBase, expenseProduct.FindProperty("Quantity")!, barrocIntensModelsExpenseProductMappingBase);

            var tableMappings4 = new List<TableMapping>();
            expenseProduct.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var expenseProductsTable = new Table("ExpenseProducts", null, relationalModel);
            var idColumn4 = new Column("Id", "int", expenseProductsTable);
            expenseProductsTable.Columns.Add("Id", idColumn4);
            var expenseIdColumn = new Column("ExpenseId", "int", expenseProductsTable);
            expenseProductsTable.Columns.Add("ExpenseId", expenseIdColumn);
            var productIdColumn0 = new Column("ProductId", "int", expenseProductsTable);
            expenseProductsTable.Columns.Add("ProductId", productIdColumn0);
            var quantityColumn = new Column("Quantity", "int", expenseProductsTable);
            expenseProductsTable.Columns.Add("Quantity", quantityColumn);
            var pK_ExpenseProducts = new UniqueConstraint("PK_ExpenseProducts", expenseProductsTable, new[] { idColumn4 });
            expenseProductsTable.PrimaryKey = pK_ExpenseProducts;
            var pK_ExpenseProductsUc = RelationalModel.GetKey(this,
                "BarrocIntens.Models.ExpenseProduct",
                new[] { "Id" });
            pK_ExpenseProducts.MappedKeys.Add(pK_ExpenseProductsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ExpenseProductsUc).Add(pK_ExpenseProducts);
            expenseProductsTable.UniqueConstraints.Add("PK_ExpenseProducts", pK_ExpenseProducts);
            var iX_ExpenseProducts_ExpenseId = new TableIndex(
            "IX_ExpenseProducts_ExpenseId", expenseProductsTable, new[] { expenseIdColumn }, false);
            var iX_ExpenseProducts_ExpenseIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.ExpenseProduct",
                new[] { "ExpenseId" });
            iX_ExpenseProducts_ExpenseId.MappedIndexes.Add(iX_ExpenseProducts_ExpenseIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ExpenseProducts_ExpenseIdIx).Add(iX_ExpenseProducts_ExpenseId);
            expenseProductsTable.Indexes.Add("IX_ExpenseProducts_ExpenseId", iX_ExpenseProducts_ExpenseId);
            var iX_ExpenseProducts_ProductId = new TableIndex(
            "IX_ExpenseProducts_ProductId", expenseProductsTable, new[] { productIdColumn0 }, false);
            var iX_ExpenseProducts_ProductIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.ExpenseProduct",
                new[] { "ProductId" });
            iX_ExpenseProducts_ProductId.MappedIndexes.Add(iX_ExpenseProducts_ProductIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ExpenseProducts_ProductIdIx).Add(iX_ExpenseProducts_ProductId);
            expenseProductsTable.Indexes.Add("IX_ExpenseProducts_ProductId", iX_ExpenseProducts_ProductId);
            relationalModel.Tables.Add(("ExpenseProducts", null), expenseProductsTable);
            var expenseProductsTableMapping = new TableMapping(expenseProduct, expenseProductsTable, true);
            expenseProductsTable.AddTypeMapping(expenseProductsTableMapping, false);
            tableMappings4.Add(expenseProductsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, expenseProduct.FindProperty("Id")!, expenseProductsTableMapping);
            RelationalModel.CreateColumnMapping(expenseIdColumn, expenseProduct.FindProperty("ExpenseId")!, expenseProductsTableMapping);
            RelationalModel.CreateColumnMapping(productIdColumn0, expenseProduct.FindProperty("ProductId")!, expenseProductsTableMapping);
            RelationalModel.CreateColumnMapping(quantityColumn, expenseProduct.FindProperty("Quantity")!, expenseProductsTableMapping);

            var maintenaceAppointment = FindEntityType("BarrocIntens.Models.MaintenaceAppointment")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            maintenaceAppointment.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var barrocIntensModelsMaintenaceAppointmentTableBase = new TableBase("BarrocIntens.Models.MaintenaceAppointment", null, relationalModel);
            var companyIdColumnBase1 = new ColumnBase<ColumnMappingBase>("CompanyId", "int", barrocIntensModelsMaintenaceAppointmentTableBase);
            barrocIntensModelsMaintenaceAppointmentTableBase.Columns.Add("CompanyId", companyIdColumnBase1);
            var dateAddedColumnBase = new ColumnBase<ColumnMappingBase>("DateAdded", "datetime(6)", barrocIntensModelsMaintenaceAppointmentTableBase);
            barrocIntensModelsMaintenaceAppointmentTableBase.Columns.Add("DateAdded", dateAddedColumnBase);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("Id", "int", barrocIntensModelsMaintenaceAppointmentTableBase);
            barrocIntensModelsMaintenaceAppointmentTableBase.Columns.Add("Id", idColumnBase5);
            var remarkColumnBase = new ColumnBase<ColumnMappingBase>("Remark", "longtext", barrocIntensModelsMaintenaceAppointmentTableBase);
            barrocIntensModelsMaintenaceAppointmentTableBase.Columns.Add("Remark", remarkColumnBase);
            relationalModel.DefaultTables.Add("BarrocIntens.Models.MaintenaceAppointment", barrocIntensModelsMaintenaceAppointmentTableBase);
            var barrocIntensModelsMaintenaceAppointmentMappingBase = new TableMappingBase<ColumnMappingBase>(maintenaceAppointment, barrocIntensModelsMaintenaceAppointmentTableBase, true);
            barrocIntensModelsMaintenaceAppointmentTableBase.AddTypeMapping(barrocIntensModelsMaintenaceAppointmentMappingBase, false);
            defaultTableMappings5.Add(barrocIntensModelsMaintenaceAppointmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, maintenaceAppointment.FindProperty("Id")!, barrocIntensModelsMaintenaceAppointmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)companyIdColumnBase1, maintenaceAppointment.FindProperty("CompanyId")!, barrocIntensModelsMaintenaceAppointmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateAddedColumnBase, maintenaceAppointment.FindProperty("DateAdded")!, barrocIntensModelsMaintenaceAppointmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)remarkColumnBase, maintenaceAppointment.FindProperty("Remark")!, barrocIntensModelsMaintenaceAppointmentMappingBase);

            var tableMappings5 = new List<TableMapping>();
            maintenaceAppointment.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var maintenaceAppointmentsTable = new Table("MaintenaceAppointments", null, relationalModel);
            var idColumn5 = new Column("Id", "int", maintenaceAppointmentsTable);
            maintenaceAppointmentsTable.Columns.Add("Id", idColumn5);
            var companyIdColumn1 = new Column("CompanyId", "int", maintenaceAppointmentsTable);
            maintenaceAppointmentsTable.Columns.Add("CompanyId", companyIdColumn1);
            var dateAddedColumn = new Column("DateAdded", "datetime(6)", maintenaceAppointmentsTable);
            maintenaceAppointmentsTable.Columns.Add("DateAdded", dateAddedColumn);
            var remarkColumn = new Column("Remark", "longtext", maintenaceAppointmentsTable);
            maintenaceAppointmentsTable.Columns.Add("Remark", remarkColumn);
            var pK_MaintenaceAppointments = new UniqueConstraint("PK_MaintenaceAppointments", maintenaceAppointmentsTable, new[] { idColumn5 });
            maintenaceAppointmentsTable.PrimaryKey = pK_MaintenaceAppointments;
            var pK_MaintenaceAppointmentsUc = RelationalModel.GetKey(this,
                "BarrocIntens.Models.MaintenaceAppointment",
                new[] { "Id" });
            pK_MaintenaceAppointments.MappedKeys.Add(pK_MaintenaceAppointmentsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MaintenaceAppointmentsUc).Add(pK_MaintenaceAppointments);
            maintenaceAppointmentsTable.UniqueConstraints.Add("PK_MaintenaceAppointments", pK_MaintenaceAppointments);
            var iX_MaintenaceAppointments_CompanyId = new TableIndex(
            "IX_MaintenaceAppointments_CompanyId", maintenaceAppointmentsTable, new[] { companyIdColumn1 }, false);
            var iX_MaintenaceAppointments_CompanyIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.MaintenaceAppointment",
                new[] { "CompanyId" });
            iX_MaintenaceAppointments_CompanyId.MappedIndexes.Add(iX_MaintenaceAppointments_CompanyIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_MaintenaceAppointments_CompanyIdIx).Add(iX_MaintenaceAppointments_CompanyId);
            maintenaceAppointmentsTable.Indexes.Add("IX_MaintenaceAppointments_CompanyId", iX_MaintenaceAppointments_CompanyId);
            relationalModel.Tables.Add(("MaintenaceAppointments", null), maintenaceAppointmentsTable);
            var maintenaceAppointmentsTableMapping = new TableMapping(maintenaceAppointment, maintenaceAppointmentsTable, true);
            maintenaceAppointmentsTable.AddTypeMapping(maintenaceAppointmentsTableMapping, false);
            tableMappings5.Add(maintenaceAppointmentsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, maintenaceAppointment.FindProperty("Id")!, maintenaceAppointmentsTableMapping);
            RelationalModel.CreateColumnMapping(companyIdColumn1, maintenaceAppointment.FindProperty("CompanyId")!, maintenaceAppointmentsTableMapping);
            RelationalModel.CreateColumnMapping(dateAddedColumn, maintenaceAppointment.FindProperty("DateAdded")!, maintenaceAppointmentsTableMapping);
            RelationalModel.CreateColumnMapping(remarkColumn, maintenaceAppointment.FindProperty("Remark")!, maintenaceAppointmentsTableMapping);

            var note = FindEntityType("BarrocIntens.Models.Note")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            note.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var barrocIntensModelsNoteTableBase = new TableBase("BarrocIntens.Models.Note", null, relationalModel);
            var companyIdColumnBase2 = new ColumnBase<ColumnMappingBase>("CompanyId", "int", barrocIntensModelsNoteTableBase);
            barrocIntensModelsNoteTableBase.Columns.Add("CompanyId", companyIdColumnBase2);
            var dateColumnBase1 = new ColumnBase<ColumnMappingBase>("Date", "datetime(6)", barrocIntensModelsNoteTableBase);
            barrocIntensModelsNoteTableBase.Columns.Add("Date", dateColumnBase1);
            var idColumnBase6 = new ColumnBase<ColumnMappingBase>("Id", "int", barrocIntensModelsNoteTableBase);
            barrocIntensModelsNoteTableBase.Columns.Add("Id", idColumnBase6);
            var notesColumnBase = new ColumnBase<ColumnMappingBase>("Notes", "longtext", barrocIntensModelsNoteTableBase);
            barrocIntensModelsNoteTableBase.Columns.Add("Notes", notesColumnBase);
            var userIdColumnBase1 = new ColumnBase<ColumnMappingBase>("UserId", "int", barrocIntensModelsNoteTableBase);
            barrocIntensModelsNoteTableBase.Columns.Add("UserId", userIdColumnBase1);
            relationalModel.DefaultTables.Add("BarrocIntens.Models.Note", barrocIntensModelsNoteTableBase);
            var barrocIntensModelsNoteMappingBase = new TableMappingBase<ColumnMappingBase>(note, barrocIntensModelsNoteTableBase, true);
            barrocIntensModelsNoteTableBase.AddTypeMapping(barrocIntensModelsNoteMappingBase, false);
            defaultTableMappings6.Add(barrocIntensModelsNoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase6, note.FindProperty("Id")!, barrocIntensModelsNoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)companyIdColumnBase2, note.FindProperty("CompanyId")!, barrocIntensModelsNoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateColumnBase1, note.FindProperty("Date")!, barrocIntensModelsNoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)notesColumnBase, note.FindProperty("Notes")!, barrocIntensModelsNoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase1, note.FindProperty("UserId")!, barrocIntensModelsNoteMappingBase);

            var tableMappings6 = new List<TableMapping>();
            note.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var notesTable = new Table("Notes", null, relationalModel);
            var idColumn6 = new Column("Id", "int", notesTable);
            notesTable.Columns.Add("Id", idColumn6);
            var companyIdColumn2 = new Column("CompanyId", "int", notesTable);
            notesTable.Columns.Add("CompanyId", companyIdColumn2);
            var dateColumn1 = new Column("Date", "datetime(6)", notesTable);
            notesTable.Columns.Add("Date", dateColumn1);
            var notesColumn = new Column("Notes", "longtext", notesTable);
            notesTable.Columns.Add("Notes", notesColumn);
            var userIdColumn1 = new Column("UserId", "int", notesTable);
            notesTable.Columns.Add("UserId", userIdColumn1);
            var pK_Notes = new UniqueConstraint("PK_Notes", notesTable, new[] { idColumn6 });
            notesTable.PrimaryKey = pK_Notes;
            var pK_NotesUc = RelationalModel.GetKey(this,
                "BarrocIntens.Models.Note",
                new[] { "Id" });
            pK_Notes.MappedKeys.Add(pK_NotesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_NotesUc).Add(pK_Notes);
            notesTable.UniqueConstraints.Add("PK_Notes", pK_Notes);
            var iX_Notes_CompanyId = new TableIndex(
            "IX_Notes_CompanyId", notesTable, new[] { companyIdColumn2 }, false);
            var iX_Notes_CompanyIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.Note",
                new[] { "CompanyId" });
            iX_Notes_CompanyId.MappedIndexes.Add(iX_Notes_CompanyIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Notes_CompanyIdIx).Add(iX_Notes_CompanyId);
            notesTable.Indexes.Add("IX_Notes_CompanyId", iX_Notes_CompanyId);
            var iX_Notes_UserId = new TableIndex(
            "IX_Notes_UserId", notesTable, new[] { userIdColumn1 }, false);
            var iX_Notes_UserIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.Note",
                new[] { "UserId" });
            iX_Notes_UserId.MappedIndexes.Add(iX_Notes_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Notes_UserIdIx).Add(iX_Notes_UserId);
            notesTable.Indexes.Add("IX_Notes_UserId", iX_Notes_UserId);
            relationalModel.Tables.Add(("Notes", null), notesTable);
            var notesTableMapping = new TableMapping(note, notesTable, true);
            notesTable.AddTypeMapping(notesTableMapping, false);
            tableMappings6.Add(notesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn6, note.FindProperty("Id")!, notesTableMapping);
            RelationalModel.CreateColumnMapping(companyIdColumn2, note.FindProperty("CompanyId")!, notesTableMapping);
            RelationalModel.CreateColumnMapping(dateColumn1, note.FindProperty("Date")!, notesTableMapping);
            RelationalModel.CreateColumnMapping(notesColumn, note.FindProperty("Notes")!, notesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn1, note.FindProperty("UserId")!, notesTableMapping);

            var product = FindEntityType("BarrocIntens.Models.Product")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            product.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var barrocIntensModelsProductTableBase = new TableBase("BarrocIntens.Models.Product", null, relationalModel);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "varchar(255)", barrocIntensModelsProductTableBase);
            barrocIntensModelsProductTableBase.Columns.Add("Description", descriptionColumnBase);
            var expenseIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ExpenseId", "int", barrocIntensModelsProductTableBase)
            {
                IsNullable = true
            };
            barrocIntensModelsProductTableBase.Columns.Add("ExpenseId", expenseIdColumnBase0);
            var idColumnBase7 = new ColumnBase<ColumnMappingBase>("Id", "int", barrocIntensModelsProductTableBase);
            barrocIntensModelsProductTableBase.Columns.Add("Id", idColumnBase7);
            var imagePathColumnBase = new ColumnBase<ColumnMappingBase>("ImagePath", "varchar(255)", barrocIntensModelsProductTableBase)
            {
                IsNullable = true
            };
            barrocIntensModelsProductTableBase.Columns.Add("ImagePath", imagePathColumnBase);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "varchar(255)", barrocIntensModelsProductTableBase);
            barrocIntensModelsProductTableBase.Columns.Add("Name", nameColumnBase0);
            var priceColumnBase = new ColumnBase<ColumnMappingBase>("Price", "decimal(8,2)", barrocIntensModelsProductTableBase);
            barrocIntensModelsProductTableBase.Columns.Add("Price", priceColumnBase);
            var productCategoryIdColumnBase = new ColumnBase<ColumnMappingBase>("ProductCategoryId", "int", barrocIntensModelsProductTableBase);
            barrocIntensModelsProductTableBase.Columns.Add("ProductCategoryId", productCategoryIdColumnBase);
            var quoteIdColumnBase = new ColumnBase<ColumnMappingBase>("QuoteId", "int", barrocIntensModelsProductTableBase)
            {
                IsNullable = true
            };
            barrocIntensModelsProductTableBase.Columns.Add("QuoteId", quoteIdColumnBase);
            relationalModel.DefaultTables.Add("BarrocIntens.Models.Product", barrocIntensModelsProductTableBase);
            var barrocIntensModelsProductMappingBase = new TableMappingBase<ColumnMappingBase>(product, barrocIntensModelsProductTableBase, true);
            barrocIntensModelsProductTableBase.AddTypeMapping(barrocIntensModelsProductMappingBase, false);
            defaultTableMappings7.Add(barrocIntensModelsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, product.FindProperty("Id")!, barrocIntensModelsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, product.FindProperty("Description")!, barrocIntensModelsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expenseIdColumnBase0, product.FindProperty("ExpenseId")!, barrocIntensModelsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imagePathColumnBase, product.FindProperty("ImagePath")!, barrocIntensModelsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, product.FindProperty("Name")!, barrocIntensModelsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)priceColumnBase, product.FindProperty("Price")!, barrocIntensModelsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productCategoryIdColumnBase, product.FindProperty("ProductCategoryId")!, barrocIntensModelsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)quoteIdColumnBase, product.FindProperty("QuoteId")!, barrocIntensModelsProductMappingBase);

            var tableMappings7 = new List<TableMapping>();
            product.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var productsTable = new Table("Products", null, relationalModel);
            var idColumn7 = new Column("Id", "int", productsTable);
            productsTable.Columns.Add("Id", idColumn7);
            var descriptionColumn = new Column("Description", "varchar(255)", productsTable);
            productsTable.Columns.Add("Description", descriptionColumn);
            var expenseIdColumn0 = new Column("ExpenseId", "int", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("ExpenseId", expenseIdColumn0);
            var imagePathColumn = new Column("ImagePath", "varchar(255)", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("ImagePath", imagePathColumn);
            var nameColumn0 = new Column("Name", "varchar(255)", productsTable);
            productsTable.Columns.Add("Name", nameColumn0);
            var priceColumn = new Column("Price", "decimal(8,2)", productsTable);
            productsTable.Columns.Add("Price", priceColumn);
            var productCategoryIdColumn = new Column("ProductCategoryId", "int", productsTable);
            productsTable.Columns.Add("ProductCategoryId", productCategoryIdColumn);
            var quoteIdColumn = new Column("QuoteId", "int", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("QuoteId", quoteIdColumn);
            var pK_Products = new UniqueConstraint("PK_Products", productsTable, new[] { idColumn7 });
            productsTable.PrimaryKey = pK_Products;
            var pK_ProductsUc = RelationalModel.GetKey(this,
                "BarrocIntens.Models.Product",
                new[] { "Id" });
            pK_Products.MappedKeys.Add(pK_ProductsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ProductsUc).Add(pK_Products);
            productsTable.UniqueConstraints.Add("PK_Products", pK_Products);
            var iX_Products_ExpenseId = new TableIndex(
            "IX_Products_ExpenseId", productsTable, new[] { expenseIdColumn0 }, false);
            var iX_Products_ExpenseIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.Product",
                new[] { "ExpenseId" });
            iX_Products_ExpenseId.MappedIndexes.Add(iX_Products_ExpenseIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Products_ExpenseIdIx).Add(iX_Products_ExpenseId);
            productsTable.Indexes.Add("IX_Products_ExpenseId", iX_Products_ExpenseId);
            var iX_Products_ProductCategoryId = new TableIndex(
            "IX_Products_ProductCategoryId", productsTable, new[] { productCategoryIdColumn }, false);
            var iX_Products_ProductCategoryIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.Product",
                new[] { "ProductCategoryId" });
            iX_Products_ProductCategoryId.MappedIndexes.Add(iX_Products_ProductCategoryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Products_ProductCategoryIdIx).Add(iX_Products_ProductCategoryId);
            productsTable.Indexes.Add("IX_Products_ProductCategoryId", iX_Products_ProductCategoryId);
            var iX_Products_QuoteId = new TableIndex(
            "IX_Products_QuoteId", productsTable, new[] { quoteIdColumn }, false);
            var iX_Products_QuoteIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.Product",
                new[] { "QuoteId" });
            iX_Products_QuoteId.MappedIndexes.Add(iX_Products_QuoteIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Products_QuoteIdIx).Add(iX_Products_QuoteId);
            productsTable.Indexes.Add("IX_Products_QuoteId", iX_Products_QuoteId);
            relationalModel.Tables.Add(("Products", null), productsTable);
            var productsTableMapping = new TableMapping(product, productsTable, true);
            productsTable.AddTypeMapping(productsTableMapping, false);
            tableMappings7.Add(productsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn7, product.FindProperty("Id")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, product.FindProperty("Description")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(expenseIdColumn0, product.FindProperty("ExpenseId")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(imagePathColumn, product.FindProperty("ImagePath")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, product.FindProperty("Name")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(priceColumn, product.FindProperty("Price")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(productCategoryIdColumn, product.FindProperty("ProductCategoryId")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(quoteIdColumn, product.FindProperty("QuoteId")!, productsTableMapping);

            var productCategory = FindEntityType("BarrocIntens.Models.ProductCategory")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            productCategory.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var barrocIntensModelsProductCategoryTableBase = new TableBase("BarrocIntens.Models.ProductCategory", null, relationalModel);
            var idColumnBase8 = new ColumnBase<ColumnMappingBase>("Id", "int", barrocIntensModelsProductCategoryTableBase);
            barrocIntensModelsProductCategoryTableBase.Columns.Add("Id", idColumnBase8);
            var isEmployeeOnlyColumnBase = new ColumnBase<ColumnMappingBase>("IsEmployeeOnly", "tinyint", barrocIntensModelsProductCategoryTableBase);
            barrocIntensModelsProductCategoryTableBase.Columns.Add("IsEmployeeOnly", isEmployeeOnlyColumnBase);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "varchar(255)", barrocIntensModelsProductCategoryTableBase);
            barrocIntensModelsProductCategoryTableBase.Columns.Add("Name", nameColumnBase1);
            relationalModel.DefaultTables.Add("BarrocIntens.Models.ProductCategory", barrocIntensModelsProductCategoryTableBase);
            var barrocIntensModelsProductCategoryMappingBase = new TableMappingBase<ColumnMappingBase>(productCategory, barrocIntensModelsProductCategoryTableBase, true);
            barrocIntensModelsProductCategoryTableBase.AddTypeMapping(barrocIntensModelsProductCategoryMappingBase, false);
            defaultTableMappings8.Add(barrocIntensModelsProductCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase8, productCategory.FindProperty("Id")!, barrocIntensModelsProductCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isEmployeeOnlyColumnBase, productCategory.FindProperty("IsEmployeeOnly")!, barrocIntensModelsProductCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, productCategory.FindProperty("Name")!, barrocIntensModelsProductCategoryMappingBase);

            var tableMappings8 = new List<TableMapping>();
            productCategory.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var productCategoriesTable = new Table("ProductCategories", null, relationalModel);
            var idColumn8 = new Column("Id", "int", productCategoriesTable);
            productCategoriesTable.Columns.Add("Id", idColumn8);
            var isEmployeeOnlyColumn = new Column("IsEmployeeOnly", "tinyint", productCategoriesTable);
            productCategoriesTable.Columns.Add("IsEmployeeOnly", isEmployeeOnlyColumn);
            var nameColumn1 = new Column("Name", "varchar(255)", productCategoriesTable);
            productCategoriesTable.Columns.Add("Name", nameColumn1);
            var pK_ProductCategories = new UniqueConstraint("PK_ProductCategories", productCategoriesTable, new[] { idColumn8 });
            productCategoriesTable.PrimaryKey = pK_ProductCategories;
            var pK_ProductCategoriesUc = RelationalModel.GetKey(this,
                "BarrocIntens.Models.ProductCategory",
                new[] { "Id" });
            pK_ProductCategories.MappedKeys.Add(pK_ProductCategoriesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ProductCategoriesUc).Add(pK_ProductCategories);
            productCategoriesTable.UniqueConstraints.Add("PK_ProductCategories", pK_ProductCategories);
            relationalModel.Tables.Add(("ProductCategories", null), productCategoriesTable);
            var productCategoriesTableMapping = new TableMapping(productCategory, productCategoriesTable, true);
            productCategoriesTable.AddTypeMapping(productCategoriesTableMapping, false);
            tableMappings8.Add(productCategoriesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn8, productCategory.FindProperty("Id")!, productCategoriesTableMapping);
            RelationalModel.CreateColumnMapping(isEmployeeOnlyColumn, productCategory.FindProperty("IsEmployeeOnly")!, productCategoriesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, productCategory.FindProperty("Name")!, productCategoriesTableMapping);

            var quote = FindEntityType("BarrocIntens.Models.Quote")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            quote.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var barrocIntensModelsQuoteTableBase = new TableBase("BarrocIntens.Models.Quote", null, relationalModel);
            var dateColumnBase2 = new ColumnBase<ColumnMappingBase>("Date", "datetime(6)", barrocIntensModelsQuoteTableBase);
            barrocIntensModelsQuoteTableBase.Columns.Add("Date", dateColumnBase2);
            var idColumnBase9 = new ColumnBase<ColumnMappingBase>("Id", "int", barrocIntensModelsQuoteTableBase);
            barrocIntensModelsQuoteTableBase.Columns.Add("Id", idColumnBase9);
            var userIdColumnBase2 = new ColumnBase<ColumnMappingBase>("UserId", "int", barrocIntensModelsQuoteTableBase);
            barrocIntensModelsQuoteTableBase.Columns.Add("UserId", userIdColumnBase2);
            relationalModel.DefaultTables.Add("BarrocIntens.Models.Quote", barrocIntensModelsQuoteTableBase);
            var barrocIntensModelsQuoteMappingBase = new TableMappingBase<ColumnMappingBase>(quote, barrocIntensModelsQuoteTableBase, true);
            barrocIntensModelsQuoteTableBase.AddTypeMapping(barrocIntensModelsQuoteMappingBase, false);
            defaultTableMappings9.Add(barrocIntensModelsQuoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase9, quote.FindProperty("Id")!, barrocIntensModelsQuoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateColumnBase2, quote.FindProperty("Date")!, barrocIntensModelsQuoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase2, quote.FindProperty("UserId")!, barrocIntensModelsQuoteMappingBase);

            var tableMappings9 = new List<TableMapping>();
            quote.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var quotesTable = new Table("Quotes", null, relationalModel);
            var idColumn9 = new Column("Id", "int", quotesTable);
            quotesTable.Columns.Add("Id", idColumn9);
            var dateColumn2 = new Column("Date", "datetime(6)", quotesTable);
            quotesTable.Columns.Add("Date", dateColumn2);
            var userIdColumn2 = new Column("UserId", "int", quotesTable);
            quotesTable.Columns.Add("UserId", userIdColumn2);
            var pK_Quotes = new UniqueConstraint("PK_Quotes", quotesTable, new[] { idColumn9 });
            quotesTable.PrimaryKey = pK_Quotes;
            var pK_QuotesUc = RelationalModel.GetKey(this,
                "BarrocIntens.Models.Quote",
                new[] { "Id" });
            pK_Quotes.MappedKeys.Add(pK_QuotesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_QuotesUc).Add(pK_Quotes);
            quotesTable.UniqueConstraints.Add("PK_Quotes", pK_Quotes);
            var iX_Quotes_UserId = new TableIndex(
            "IX_Quotes_UserId", quotesTable, new[] { userIdColumn2 }, false);
            var iX_Quotes_UserIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.Quote",
                new[] { "UserId" });
            iX_Quotes_UserId.MappedIndexes.Add(iX_Quotes_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Quotes_UserIdIx).Add(iX_Quotes_UserId);
            quotesTable.Indexes.Add("IX_Quotes_UserId", iX_Quotes_UserId);
            relationalModel.Tables.Add(("Quotes", null), quotesTable);
            var quotesTableMapping = new TableMapping(quote, quotesTable, true);
            quotesTable.AddTypeMapping(quotesTableMapping, false);
            tableMappings9.Add(quotesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn9, quote.FindProperty("Id")!, quotesTableMapping);
            RelationalModel.CreateColumnMapping(dateColumn2, quote.FindProperty("Date")!, quotesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn2, quote.FindProperty("UserId")!, quotesTableMapping);

            var quoteProduct = FindEntityType("BarrocIntens.Models.QuoteProduct")!;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            quoteProduct.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var barrocIntensModelsQuoteProductTableBase = new TableBase("BarrocIntens.Models.QuoteProduct", null, relationalModel);
            var idColumnBase10 = new ColumnBase<ColumnMappingBase>("Id", "int", barrocIntensModelsQuoteProductTableBase);
            barrocIntensModelsQuoteProductTableBase.Columns.Add("Id", idColumnBase10);
            var productIdColumnBase1 = new ColumnBase<ColumnMappingBase>("ProductId", "int", barrocIntensModelsQuoteProductTableBase);
            barrocIntensModelsQuoteProductTableBase.Columns.Add("ProductId", productIdColumnBase1);
            var quantityColumnBase0 = new ColumnBase<ColumnMappingBase>("Quantity", "int", barrocIntensModelsQuoteProductTableBase);
            barrocIntensModelsQuoteProductTableBase.Columns.Add("Quantity", quantityColumnBase0);
            var quoteIdColumnBase0 = new ColumnBase<ColumnMappingBase>("QuoteId", "int", barrocIntensModelsQuoteProductTableBase);
            barrocIntensModelsQuoteProductTableBase.Columns.Add("QuoteId", quoteIdColumnBase0);
            relationalModel.DefaultTables.Add("BarrocIntens.Models.QuoteProduct", barrocIntensModelsQuoteProductTableBase);
            var barrocIntensModelsQuoteProductMappingBase = new TableMappingBase<ColumnMappingBase>(quoteProduct, barrocIntensModelsQuoteProductTableBase, true);
            barrocIntensModelsQuoteProductTableBase.AddTypeMapping(barrocIntensModelsQuoteProductMappingBase, false);
            defaultTableMappings10.Add(barrocIntensModelsQuoteProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase10, quoteProduct.FindProperty("Id")!, barrocIntensModelsQuoteProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productIdColumnBase1, quoteProduct.FindProperty("ProductId")!, barrocIntensModelsQuoteProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)quantityColumnBase0, quoteProduct.FindProperty("Quantity")!, barrocIntensModelsQuoteProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)quoteIdColumnBase0, quoteProduct.FindProperty("QuoteId")!, barrocIntensModelsQuoteProductMappingBase);

            var tableMappings10 = new List<TableMapping>();
            quoteProduct.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var quoteProductsTable = new Table("QuoteProducts", null, relationalModel);
            var idColumn10 = new Column("Id", "int", quoteProductsTable);
            quoteProductsTable.Columns.Add("Id", idColumn10);
            var productIdColumn1 = new Column("ProductId", "int", quoteProductsTable);
            quoteProductsTable.Columns.Add("ProductId", productIdColumn1);
            var quantityColumn0 = new Column("Quantity", "int", quoteProductsTable);
            quoteProductsTable.Columns.Add("Quantity", quantityColumn0);
            var quoteIdColumn0 = new Column("QuoteId", "int", quoteProductsTable);
            quoteProductsTable.Columns.Add("QuoteId", quoteIdColumn0);
            var pK_QuoteProducts = new UniqueConstraint("PK_QuoteProducts", quoteProductsTable, new[] { idColumn10 });
            quoteProductsTable.PrimaryKey = pK_QuoteProducts;
            var pK_QuoteProductsUc = RelationalModel.GetKey(this,
                "BarrocIntens.Models.QuoteProduct",
                new[] { "Id" });
            pK_QuoteProducts.MappedKeys.Add(pK_QuoteProductsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_QuoteProductsUc).Add(pK_QuoteProducts);
            quoteProductsTable.UniqueConstraints.Add("PK_QuoteProducts", pK_QuoteProducts);
            var iX_QuoteProducts_ProductId = new TableIndex(
            "IX_QuoteProducts_ProductId", quoteProductsTable, new[] { productIdColumn1 }, false);
            var iX_QuoteProducts_ProductIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.QuoteProduct",
                new[] { "ProductId" });
            iX_QuoteProducts_ProductId.MappedIndexes.Add(iX_QuoteProducts_ProductIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_QuoteProducts_ProductIdIx).Add(iX_QuoteProducts_ProductId);
            quoteProductsTable.Indexes.Add("IX_QuoteProducts_ProductId", iX_QuoteProducts_ProductId);
            var iX_QuoteProducts_QuoteId = new TableIndex(
            "IX_QuoteProducts_QuoteId", quoteProductsTable, new[] { quoteIdColumn0 }, false);
            var iX_QuoteProducts_QuoteIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.QuoteProduct",
                new[] { "QuoteId" });
            iX_QuoteProducts_QuoteId.MappedIndexes.Add(iX_QuoteProducts_QuoteIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_QuoteProducts_QuoteIdIx).Add(iX_QuoteProducts_QuoteId);
            quoteProductsTable.Indexes.Add("IX_QuoteProducts_QuoteId", iX_QuoteProducts_QuoteId);
            relationalModel.Tables.Add(("QuoteProducts", null), quoteProductsTable);
            var quoteProductsTableMapping = new TableMapping(quoteProduct, quoteProductsTable, true);
            quoteProductsTable.AddTypeMapping(quoteProductsTableMapping, false);
            tableMappings10.Add(quoteProductsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn10, quoteProduct.FindProperty("Id")!, quoteProductsTableMapping);
            RelationalModel.CreateColumnMapping(productIdColumn1, quoteProduct.FindProperty("ProductId")!, quoteProductsTableMapping);
            RelationalModel.CreateColumnMapping(quantityColumn0, quoteProduct.FindProperty("Quantity")!, quoteProductsTableMapping);
            RelationalModel.CreateColumnMapping(quoteIdColumn0, quoteProduct.FindProperty("QuoteId")!, quoteProductsTableMapping);

            var role = FindEntityType("BarrocIntens.Models.Role")!;

            var defaultTableMappings11 = new List<TableMappingBase<ColumnMappingBase>>();
            role.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings11);
            var barrocIntensModelsRoleTableBase = new TableBase("BarrocIntens.Models.Role", null, relationalModel);
            var idColumnBase11 = new ColumnBase<ColumnMappingBase>("Id", "int", barrocIntensModelsRoleTableBase);
            barrocIntensModelsRoleTableBase.Columns.Add("Id", idColumnBase11);
            var nameColumnBase2 = new ColumnBase<ColumnMappingBase>("Name", "varchar(255)", barrocIntensModelsRoleTableBase);
            barrocIntensModelsRoleTableBase.Columns.Add("Name", nameColumnBase2);
            relationalModel.DefaultTables.Add("BarrocIntens.Models.Role", barrocIntensModelsRoleTableBase);
            var barrocIntensModelsRoleMappingBase = new TableMappingBase<ColumnMappingBase>(role, barrocIntensModelsRoleTableBase, true);
            barrocIntensModelsRoleTableBase.AddTypeMapping(barrocIntensModelsRoleMappingBase, false);
            defaultTableMappings11.Add(barrocIntensModelsRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase11, role.FindProperty("Id")!, barrocIntensModelsRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase2, role.FindProperty("Name")!, barrocIntensModelsRoleMappingBase);

            var tableMappings11 = new List<TableMapping>();
            role.SetRuntimeAnnotation("Relational:TableMappings", tableMappings11);
            var rolesTable = new Table("Roles", null, relationalModel);
            var idColumn11 = new Column("Id", "int", rolesTable);
            rolesTable.Columns.Add("Id", idColumn11);
            var nameColumn2 = new Column("Name", "varchar(255)", rolesTable);
            rolesTable.Columns.Add("Name", nameColumn2);
            var pK_Roles = new UniqueConstraint("PK_Roles", rolesTable, new[] { idColumn11 });
            rolesTable.PrimaryKey = pK_Roles;
            var pK_RolesUc = RelationalModel.GetKey(this,
                "BarrocIntens.Models.Role",
                new[] { "Id" });
            pK_Roles.MappedKeys.Add(pK_RolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RolesUc).Add(pK_Roles);
            rolesTable.UniqueConstraints.Add("PK_Roles", pK_Roles);
            relationalModel.Tables.Add(("Roles", null), rolesTable);
            var rolesTableMapping = new TableMapping(role, rolesTable, true);
            rolesTable.AddTypeMapping(rolesTableMapping, false);
            tableMappings11.Add(rolesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn11, role.FindProperty("Id")!, rolesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn2, role.FindProperty("Name")!, rolesTableMapping);

            var user = FindEntityType("BarrocIntens.Models.User")!;

            var defaultTableMappings12 = new List<TableMappingBase<ColumnMappingBase>>();
            user.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings12);
            var barrocIntensModelsUserTableBase = new TableBase("BarrocIntens.Models.User", null, relationalModel);
            var idColumnBase12 = new ColumnBase<ColumnMappingBase>("Id", "int", barrocIntensModelsUserTableBase);
            barrocIntensModelsUserTableBase.Columns.Add("Id", idColumnBase12);
            var nameColumnBase3 = new ColumnBase<ColumnMappingBase>("Name", "varchar(45)", barrocIntensModelsUserTableBase);
            barrocIntensModelsUserTableBase.Columns.Add("Name", nameColumnBase3);
            var passwordColumnBase = new ColumnBase<ColumnMappingBase>("Password", "varchar(255)", barrocIntensModelsUserTableBase);
            barrocIntensModelsUserTableBase.Columns.Add("Password", passwordColumnBase);
            var roleIdColumnBase = new ColumnBase<ColumnMappingBase>("RoleId", "int", barrocIntensModelsUserTableBase);
            barrocIntensModelsUserTableBase.Columns.Add("RoleId", roleIdColumnBase);
            var userNameColumnBase = new ColumnBase<ColumnMappingBase>("UserName", "varchar(255)", barrocIntensModelsUserTableBase);
            barrocIntensModelsUserTableBase.Columns.Add("UserName", userNameColumnBase);
            relationalModel.DefaultTables.Add("BarrocIntens.Models.User", barrocIntensModelsUserTableBase);
            var barrocIntensModelsUserMappingBase = new TableMappingBase<ColumnMappingBase>(user, barrocIntensModelsUserTableBase, true);
            barrocIntensModelsUserTableBase.AddTypeMapping(barrocIntensModelsUserMappingBase, false);
            defaultTableMappings12.Add(barrocIntensModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase12, user.FindProperty("Id")!, barrocIntensModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase3, user.FindProperty("Name")!, barrocIntensModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordColumnBase, user.FindProperty("Password")!, barrocIntensModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase, user.FindProperty("RoleId")!, barrocIntensModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userNameColumnBase, user.FindProperty("UserName")!, barrocIntensModelsUserMappingBase);

            var tableMappings12 = new List<TableMapping>();
            user.SetRuntimeAnnotation("Relational:TableMappings", tableMappings12);
            var userTable = new Table("User", null, relationalModel);
            var idColumn12 = new Column("Id", "int", userTable);
            userTable.Columns.Add("Id", idColumn12);
            var nameColumn3 = new Column("Name", "varchar(45)", userTable);
            userTable.Columns.Add("Name", nameColumn3);
            var passwordColumn = new Column("Password", "varchar(255)", userTable);
            userTable.Columns.Add("Password", passwordColumn);
            var roleIdColumn = new Column("RoleId", "int", userTable);
            userTable.Columns.Add("RoleId", roleIdColumn);
            var userNameColumn = new Column("UserName", "varchar(255)", userTable);
            userTable.Columns.Add("UserName", userNameColumn);
            var pK_User = new UniqueConstraint("PK_User", userTable, new[] { idColumn12 });
            userTable.PrimaryKey = pK_User;
            var pK_UserUc = RelationalModel.GetKey(this,
                "BarrocIntens.Models.User",
                new[] { "Id" });
            pK_User.MappedKeys.Add(pK_UserUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UserUc).Add(pK_User);
            userTable.UniqueConstraints.Add("PK_User", pK_User);
            var iX_User_RoleId = new TableIndex(
            "IX_User_RoleId", userTable, new[] { roleIdColumn }, false);
            var iX_User_RoleIdIx = RelationalModel.GetIndex(this,
                "BarrocIntens.Models.User",
                new[] { "RoleId" });
            iX_User_RoleId.MappedIndexes.Add(iX_User_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_User_RoleIdIx).Add(iX_User_RoleId);
            userTable.Indexes.Add("IX_User_RoleId", iX_User_RoleId);
            relationalModel.Tables.Add(("User", null), userTable);
            var userTableMapping = new TableMapping(user, userTable, true);
            userTable.AddTypeMapping(userTableMapping, false);
            tableMappings12.Add(userTableMapping);
            RelationalModel.CreateColumnMapping(idColumn12, user.FindProperty("Id")!, userTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn3, user.FindProperty("Name")!, userTableMapping);
            RelationalModel.CreateColumnMapping(passwordColumn, user.FindProperty("Password")!, userTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn, user.FindProperty("RoleId")!, userTableMapping);
            RelationalModel.CreateColumnMapping(userNameColumn, user.FindProperty("UserName")!, userTableMapping);
            var fK_Companies_User_UserId = new ForeignKeyConstraint(
                "FK_Companies_User_UserId", companiesTable, userTable,
                new[] { userIdColumn },
                userTable.FindUniqueConstraint("PK_User")!, ReferentialAction.Cascade);
            var fK_Companies_User_UserIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.Company",
                new[] { "UserId" },
                "BarrocIntens.Models.User",
                new[] { "Id" });
            fK_Companies_User_UserId.MappedForeignKeys.Add(fK_Companies_User_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Companies_User_UserIdFk).Add(fK_Companies_User_UserId);
            companiesTable.ForeignKeyConstraints.Add(fK_Companies_User_UserId);
            userTable.ReferencingForeignKeyConstraints.Add(fK_Companies_User_UserId);
            var fK_Contracts_Companies_CompanyId = new ForeignKeyConstraint(
                "FK_Contracts_Companies_CompanyId", contractsTable, companiesTable,
                new[] { companyIdColumn },
                companiesTable.FindUniqueConstraint("PK_Companies")!, ReferentialAction.Cascade);
            var fK_Contracts_Companies_CompanyIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.Contract",
                new[] { "CompanyId" },
                "BarrocIntens.Models.Company",
                new[] { "Id" });
            fK_Contracts_Companies_CompanyId.MappedForeignKeys.Add(fK_Contracts_Companies_CompanyIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Contracts_Companies_CompanyIdFk).Add(fK_Contracts_Companies_CompanyId);
            contractsTable.ForeignKeyConstraints.Add(fK_Contracts_Companies_CompanyId);
            companiesTable.ReferencingForeignKeyConstraints.Add(fK_Contracts_Companies_CompanyId);
            var fK_CustomInvoiceProducts_CustomInvoices_CustomInvoiceId = new ForeignKeyConstraint(
                "FK_CustomInvoiceProducts_CustomInvoices_CustomInvoiceId", customInvoiceProductsTable, customInvoicesTable,
                new[] { customInvoiceIdColumn },
                customInvoicesTable.FindUniqueConstraint("PK_CustomInvoices")!, ReferentialAction.Cascade);
            var fK_CustomInvoiceProducts_CustomInvoices_CustomInvoiceIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.CustomInvoiceProduct",
                new[] { "CustomInvoiceId" },
                "BarrocIntens.Models.CustomInvoice",
                new[] { "Id" });
            fK_CustomInvoiceProducts_CustomInvoices_CustomInvoiceId.MappedForeignKeys.Add(fK_CustomInvoiceProducts_CustomInvoices_CustomInvoiceIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CustomInvoiceProducts_CustomInvoices_CustomInvoiceIdFk).Add(fK_CustomInvoiceProducts_CustomInvoices_CustomInvoiceId);
            customInvoiceProductsTable.ForeignKeyConstraints.Add(fK_CustomInvoiceProducts_CustomInvoices_CustomInvoiceId);
            customInvoicesTable.ReferencingForeignKeyConstraints.Add(fK_CustomInvoiceProducts_CustomInvoices_CustomInvoiceId);
            var fK_CustomInvoiceProducts_Products_ProductId = new ForeignKeyConstraint(
                "FK_CustomInvoiceProducts_Products_ProductId", customInvoiceProductsTable, productsTable,
                new[] { productIdColumn },
                productsTable.FindUniqueConstraint("PK_Products")!, ReferentialAction.Cascade);
            var fK_CustomInvoiceProducts_Products_ProductIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.CustomInvoiceProduct",
                new[] { "ProductId" },
                "BarrocIntens.Models.Product",
                new[] { "Id" });
            fK_CustomInvoiceProducts_Products_ProductId.MappedForeignKeys.Add(fK_CustomInvoiceProducts_Products_ProductIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CustomInvoiceProducts_Products_ProductIdFk).Add(fK_CustomInvoiceProducts_Products_ProductId);
            customInvoiceProductsTable.ForeignKeyConstraints.Add(fK_CustomInvoiceProducts_Products_ProductId);
            productsTable.ReferencingForeignKeyConstraints.Add(fK_CustomInvoiceProducts_Products_ProductId);
            var fK_CustomInvoices_Companies_CompanyId = new ForeignKeyConstraint(
                "FK_CustomInvoices_Companies_CompanyId", customInvoicesTable, companiesTable,
                new[] { companyIdColumn0 },
                companiesTable.FindUniqueConstraint("PK_Companies")!, ReferentialAction.Cascade);
            var fK_CustomInvoices_Companies_CompanyIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.CustomInvoice",
                new[] { "CompanyId" },
                "BarrocIntens.Models.Company",
                new[] { "Id" });
            fK_CustomInvoices_Companies_CompanyId.MappedForeignKeys.Add(fK_CustomInvoices_Companies_CompanyIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CustomInvoices_Companies_CompanyIdFk).Add(fK_CustomInvoices_Companies_CompanyId);
            customInvoicesTable.ForeignKeyConstraints.Add(fK_CustomInvoices_Companies_CompanyId);
            companiesTable.ReferencingForeignKeyConstraints.Add(fK_CustomInvoices_Companies_CompanyId);
            var fK_ExpenseProducts_Expenses_ExpenseId = new ForeignKeyConstraint(
                "FK_ExpenseProducts_Expenses_ExpenseId", expenseProductsTable, expensesTable,
                new[] { expenseIdColumn },
                expensesTable.FindUniqueConstraint("PK_Expenses")!, ReferentialAction.Cascade);
            var fK_ExpenseProducts_Expenses_ExpenseIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.ExpenseProduct",
                new[] { "ExpenseId" },
                "BarrocIntens.Models.Expense",
                new[] { "Id" });
            fK_ExpenseProducts_Expenses_ExpenseId.MappedForeignKeys.Add(fK_ExpenseProducts_Expenses_ExpenseIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ExpenseProducts_Expenses_ExpenseIdFk).Add(fK_ExpenseProducts_Expenses_ExpenseId);
            expenseProductsTable.ForeignKeyConstraints.Add(fK_ExpenseProducts_Expenses_ExpenseId);
            expensesTable.ReferencingForeignKeyConstraints.Add(fK_ExpenseProducts_Expenses_ExpenseId);
            var fK_ExpenseProducts_Products_ProductId = new ForeignKeyConstraint(
                "FK_ExpenseProducts_Products_ProductId", expenseProductsTable, productsTable,
                new[] { productIdColumn0 },
                productsTable.FindUniqueConstraint("PK_Products")!, ReferentialAction.Cascade);
            var fK_ExpenseProducts_Products_ProductIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.ExpenseProduct",
                new[] { "ProductId" },
                "BarrocIntens.Models.Product",
                new[] { "Id" });
            fK_ExpenseProducts_Products_ProductId.MappedForeignKeys.Add(fK_ExpenseProducts_Products_ProductIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ExpenseProducts_Products_ProductIdFk).Add(fK_ExpenseProducts_Products_ProductId);
            expenseProductsTable.ForeignKeyConstraints.Add(fK_ExpenseProducts_Products_ProductId);
            productsTable.ReferencingForeignKeyConstraints.Add(fK_ExpenseProducts_Products_ProductId);
            var fK_Expenses_User_UserId = new ForeignKeyConstraint(
                "FK_Expenses_User_UserId", expensesTable, userTable,
                new[] { userIdColumn0 },
                userTable.FindUniqueConstraint("PK_User")!, ReferentialAction.Cascade);
            var fK_Expenses_User_UserIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.Expense",
                new[] { "UserId" },
                "BarrocIntens.Models.User",
                new[] { "Id" });
            fK_Expenses_User_UserId.MappedForeignKeys.Add(fK_Expenses_User_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Expenses_User_UserIdFk).Add(fK_Expenses_User_UserId);
            expensesTable.ForeignKeyConstraints.Add(fK_Expenses_User_UserId);
            userTable.ReferencingForeignKeyConstraints.Add(fK_Expenses_User_UserId);
            var fK_MaintenaceAppointments_Companies_CompanyId = new ForeignKeyConstraint(
                "FK_MaintenaceAppointments_Companies_CompanyId", maintenaceAppointmentsTable, companiesTable,
                new[] { companyIdColumn1 },
                companiesTable.FindUniqueConstraint("PK_Companies")!, ReferentialAction.Cascade);
            var fK_MaintenaceAppointments_Companies_CompanyIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.MaintenaceAppointment",
                new[] { "CompanyId" },
                "BarrocIntens.Models.Company",
                new[] { "Id" });
            fK_MaintenaceAppointments_Companies_CompanyId.MappedForeignKeys.Add(fK_MaintenaceAppointments_Companies_CompanyIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_MaintenaceAppointments_Companies_CompanyIdFk).Add(fK_MaintenaceAppointments_Companies_CompanyId);
            maintenaceAppointmentsTable.ForeignKeyConstraints.Add(fK_MaintenaceAppointments_Companies_CompanyId);
            companiesTable.ReferencingForeignKeyConstraints.Add(fK_MaintenaceAppointments_Companies_CompanyId);
            var fK_Notes_Companies_CompanyId = new ForeignKeyConstraint(
                "FK_Notes_Companies_CompanyId", notesTable, companiesTable,
                new[] { companyIdColumn2 },
                companiesTable.FindUniqueConstraint("PK_Companies")!, ReferentialAction.Cascade);
            var fK_Notes_Companies_CompanyIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.Note",
                new[] { "CompanyId" },
                "BarrocIntens.Models.Company",
                new[] { "Id" });
            fK_Notes_Companies_CompanyId.MappedForeignKeys.Add(fK_Notes_Companies_CompanyIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Notes_Companies_CompanyIdFk).Add(fK_Notes_Companies_CompanyId);
            notesTable.ForeignKeyConstraints.Add(fK_Notes_Companies_CompanyId);
            companiesTable.ReferencingForeignKeyConstraints.Add(fK_Notes_Companies_CompanyId);
            var fK_Notes_User_UserId = new ForeignKeyConstraint(
                "FK_Notes_User_UserId", notesTable, userTable,
                new[] { userIdColumn1 },
                userTable.FindUniqueConstraint("PK_User")!, ReferentialAction.Cascade);
            var fK_Notes_User_UserIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.Note",
                new[] { "UserId" },
                "BarrocIntens.Models.User",
                new[] { "Id" });
            fK_Notes_User_UserId.MappedForeignKeys.Add(fK_Notes_User_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Notes_User_UserIdFk).Add(fK_Notes_User_UserId);
            notesTable.ForeignKeyConstraints.Add(fK_Notes_User_UserId);
            userTable.ReferencingForeignKeyConstraints.Add(fK_Notes_User_UserId);
            var fK_Products_Expenses_ExpenseId = new ForeignKeyConstraint(
                "FK_Products_Expenses_ExpenseId", productsTable, expensesTable,
                new[] { expenseIdColumn0 },
                expensesTable.FindUniqueConstraint("PK_Expenses")!, ReferentialAction.NoAction);
            var fK_Products_Expenses_ExpenseIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.Product",
                new[] { "ExpenseId" },
                "BarrocIntens.Models.Expense",
                new[] { "Id" });
            fK_Products_Expenses_ExpenseId.MappedForeignKeys.Add(fK_Products_Expenses_ExpenseIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Products_Expenses_ExpenseIdFk).Add(fK_Products_Expenses_ExpenseId);
            productsTable.ForeignKeyConstraints.Add(fK_Products_Expenses_ExpenseId);
            expensesTable.ReferencingForeignKeyConstraints.Add(fK_Products_Expenses_ExpenseId);
            var fK_Products_ProductCategories_ProductCategoryId = new ForeignKeyConstraint(
                "FK_Products_ProductCategories_ProductCategoryId", productsTable, productCategoriesTable,
                new[] { productCategoryIdColumn },
                productCategoriesTable.FindUniqueConstraint("PK_ProductCategories")!, ReferentialAction.Cascade);
            var fK_Products_ProductCategories_ProductCategoryIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.Product",
                new[] { "ProductCategoryId" },
                "BarrocIntens.Models.ProductCategory",
                new[] { "Id" });
            fK_Products_ProductCategories_ProductCategoryId.MappedForeignKeys.Add(fK_Products_ProductCategories_ProductCategoryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Products_ProductCategories_ProductCategoryIdFk).Add(fK_Products_ProductCategories_ProductCategoryId);
            productsTable.ForeignKeyConstraints.Add(fK_Products_ProductCategories_ProductCategoryId);
            productCategoriesTable.ReferencingForeignKeyConstraints.Add(fK_Products_ProductCategories_ProductCategoryId);
            var fK_Products_Quotes_QuoteId = new ForeignKeyConstraint(
                "FK_Products_Quotes_QuoteId", productsTable, quotesTable,
                new[] { quoteIdColumn },
                quotesTable.FindUniqueConstraint("PK_Quotes")!, ReferentialAction.NoAction);
            var fK_Products_Quotes_QuoteIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.Product",
                new[] { "QuoteId" },
                "BarrocIntens.Models.Quote",
                new[] { "Id" });
            fK_Products_Quotes_QuoteId.MappedForeignKeys.Add(fK_Products_Quotes_QuoteIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Products_Quotes_QuoteIdFk).Add(fK_Products_Quotes_QuoteId);
            productsTable.ForeignKeyConstraints.Add(fK_Products_Quotes_QuoteId);
            quotesTable.ReferencingForeignKeyConstraints.Add(fK_Products_Quotes_QuoteId);
            var fK_QuoteProducts_Products_ProductId = new ForeignKeyConstraint(
                "FK_QuoteProducts_Products_ProductId", quoteProductsTable, productsTable,
                new[] { productIdColumn1 },
                productsTable.FindUniqueConstraint("PK_Products")!, ReferentialAction.Cascade);
            var fK_QuoteProducts_Products_ProductIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.QuoteProduct",
                new[] { "ProductId" },
                "BarrocIntens.Models.Product",
                new[] { "Id" });
            fK_QuoteProducts_Products_ProductId.MappedForeignKeys.Add(fK_QuoteProducts_Products_ProductIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_QuoteProducts_Products_ProductIdFk).Add(fK_QuoteProducts_Products_ProductId);
            quoteProductsTable.ForeignKeyConstraints.Add(fK_QuoteProducts_Products_ProductId);
            productsTable.ReferencingForeignKeyConstraints.Add(fK_QuoteProducts_Products_ProductId);
            var fK_QuoteProducts_Quotes_QuoteId = new ForeignKeyConstraint(
                "FK_QuoteProducts_Quotes_QuoteId", quoteProductsTable, quotesTable,
                new[] { quoteIdColumn0 },
                quotesTable.FindUniqueConstraint("PK_Quotes")!, ReferentialAction.Cascade);
            var fK_QuoteProducts_Quotes_QuoteIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.QuoteProduct",
                new[] { "QuoteId" },
                "BarrocIntens.Models.Quote",
                new[] { "Id" });
            fK_QuoteProducts_Quotes_QuoteId.MappedForeignKeys.Add(fK_QuoteProducts_Quotes_QuoteIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_QuoteProducts_Quotes_QuoteIdFk).Add(fK_QuoteProducts_Quotes_QuoteId);
            quoteProductsTable.ForeignKeyConstraints.Add(fK_QuoteProducts_Quotes_QuoteId);
            quotesTable.ReferencingForeignKeyConstraints.Add(fK_QuoteProducts_Quotes_QuoteId);
            var fK_Quotes_User_UserId = new ForeignKeyConstraint(
                "FK_Quotes_User_UserId", quotesTable, userTable,
                new[] { userIdColumn2 },
                userTable.FindUniqueConstraint("PK_User")!, ReferentialAction.Cascade);
            var fK_Quotes_User_UserIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.Quote",
                new[] { "UserId" },
                "BarrocIntens.Models.User",
                new[] { "Id" });
            fK_Quotes_User_UserId.MappedForeignKeys.Add(fK_Quotes_User_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Quotes_User_UserIdFk).Add(fK_Quotes_User_UserId);
            quotesTable.ForeignKeyConstraints.Add(fK_Quotes_User_UserId);
            userTable.ReferencingForeignKeyConstraints.Add(fK_Quotes_User_UserId);
            var fK_User_Roles_RoleId = new ForeignKeyConstraint(
                "FK_User_Roles_RoleId", userTable, rolesTable,
                new[] { roleIdColumn },
                rolesTable.FindUniqueConstraint("PK_Roles")!, ReferentialAction.Cascade);
            var fK_User_Roles_RoleIdFk = RelationalModel.GetForeignKey(this,
                "BarrocIntens.Models.User",
                new[] { "RoleId" },
                "BarrocIntens.Models.Role",
                new[] { "Id" });
            fK_User_Roles_RoleId.MappedForeignKeys.Add(fK_User_Roles_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_User_Roles_RoleIdFk).Add(fK_User_Roles_RoleId);
            userTable.ForeignKeyConstraints.Add(fK_User_Roles_RoleId);
            rolesTable.ReferencingForeignKeyConstraints.Add(fK_User_Roles_RoleId);
            return relationalModel.MakeReadOnly();
        }
    }
}
